#!/usr/bin/perl
use Config::Auto;
use Cwd 'abs_path';

use FindBin;
use lib "$FindBin::Bin/medac";

use Getopt::Long;
use FindBin;
use JSON::XS;
use strict;
use warnings;
use Data::Dumper;
use File::Basename;
use POSIX;
use File::Copy;

use Medac::Metadata::Source::IMDB;
use Medac::Cache;

my $scan_root = getcwd() . '/';

my $imdb = new Medac::Metadata::Source::IMDB();


my $debug_on = 0;
my $search;
my $search_type = 'movie';
my $scan;
my $rename = 0;
my $max_results = 15;
my $recursive = 0;

GetOptions (
	"search|s=s"   => \$search,
	'scan' => \$scan,
	'd|dir=s' => \$scan_root,
	't|type=s' => \$search_type,
	'rename' => \$rename,
	'R|recursive' => \$recursive,
	'm|max=i' => \$max_results
);

if ($max_results < 1) {
	$max_results = 1;
}


$search_type = lc($search_type);

sub msg {
	my $msg = shift @_ || "";
	my $nobreak = shift @_;
	
	my $break = $nobreak ? "" : "\n";
	
	print STDERR "${msg}${break}";
}

sub dbg {
	my $msg = shift @_;
	if ($debug_on) {
		msg  "DEBUG: $msg";
	}
}

sub warning {
	my $msg = shift @_;
	msg "WARN: $msg";
}

sub err {
	my $msg = shift @_;
	my $exit_code = shift @_ || 0;
	msg "ERROR: $msg";
	exit($exit_code);
}

sub usage {
	my $msg = shift @_ || 0;
	
	
	msg "imdbcl - A command line tool for searching the IMDB";
	msg "Usage: imdbcl [OPTION]";
	msg;
	msg "Options";
	msg "  -s, --search      Search term for the IMDB.";
	msg "  -m, --max         The maximum number of search results to display.";
	msg "  -d, --dir         The directory to scan, if scanning.  Defaults to the CWD.";
	msg "      --scan        Scan directory performing IMDB searches based on folder name.  If no search term is specified this is the default action.";
	msg "      --rename      Rename directories during scan when a match is selected.";
	msg "  -R, --recursive   Recursively scan directories.";
	msg "  -t, --type        Type of search, either 'movie' (default) or 'tv'.";
	msg;
	if ($msg) {
		err $msg;
	} else {
		exit(0);
	}
}

my $prev_choices = {};


sub pickMovie {
	$search = shift @_;
	
	$search =~ s/\((19|20)\d{2}\)//gis;
	$search =~ s/^\s*([^\s])/$1/gis;
	$search =~ s/([^\s])\s*$/$1/gis;
	
	if (defined $prev_choices->{$search}) {
		return $prev_choices->{$search};
	} else {
		
		
		my $results;
		if ($search_type eq 'tv') {
			$results = $imdb->searchSeries($search);
		} else {
			$results = $imdb->searchMovie($search);
		}
		
		if (scalar @$results < 1) {
			return;
		} else {
			
			if (scalar @$results > $max_results) {
				@$results = @$results[0..($max_results-1)];
			}
			my $default = 'S';
			
			msg "...found; choose.";
			
			my $picked = 0;
			while (!$picked) {
				my $cnt = 0;
				my $choices = {s => 'S', 'q' => 'Q', 'm' => 'M'};
				msg '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=';
				foreach my $r (@{$results}) {
					$cnt++;
					my $synopsis = $r->{synopsis} || 'No synopsis';
					$synopsis =~ s/^(.{,80}).+$/$1/gi;
					msg "    $cnt) $r->{title} ($r->{year}) [$r->{id}] - $synopsis";
					$choices->{$cnt} = $r;
				}
				msg "    M) Manual Search";
				msg "    S) Skip";
				msg "    Q) Quit Program";
				msg "\nChoose [$default]: ", 1;
				my $choice = <STDIN>;
				chomp $choice;
				if ($choice eq '') { $choice = $default; }
				$choice = lc($choice);
				if ($choices->{$choice}) {
					if ($choice eq 'm') {
						msg "Search? ", 1;
						$search = <STDIN>;
						$search =~ s/\((19|20)\d{2}\)//gis;
						$search =~ s/^\s*([^\s])/$1/gis;
						$search =~ s/([^\s])\s*$/$1/gis;
						chomp($search);
						if ($search_type eq 'tv') {
							$results = $imdb->searchSeries($search);
						} else {
							$results = $imdb->searchMovie($search);
						}
					} elsif ($choice eq 's') {
						return;
					} elsif ($choice eq 'q') {
						exit(0);
					} else {
						$prev_choices->{$choice} = $choices->{$choice};
						return $prev_choices->{$choice};
					}
				}
				
			} # while()
		}
	} # prev_choice?
} # pickMovie()

sub fileFilter {
	my $base = shift @_;
	my @files = sort {uc($a) cmp uc($b) } @_;
	
	return map {
		((-d $base . $_ || $_ =~ m/\.(?:avi|mkv|mp4|m4v)$/gi) && ($_ !~ m/^\./) && ($_ !~ m/\btt\d+/gi) && ($_ !~ m/^(?:extrathumbs|extrafanart|sample|subs)$/gi)) ? $_ : ();
	} @files; 
} # fileFilter()

sub hasMedia {
	my $dir = shift @_;
	
	if (! -d $dir) {
		return;
	}
	
	
	opendir DFH, $dir;
	my @files = readdir DFH;
	@files = map { $_ =~ m/\.(?:mp4|mkv|avi)$/gi ? $_  : (); } @files;
	closedir DFH;
	
	return scalar @files >= 1;
}

sub scanDir {
	my $dir = shift @_;
	if (! -d $dir) {
		return;
	}
	
	if ($dir !~ m/\/$/) {
		$dir .= '/';
	}
	
	opendir DFH, $dir;
	my @uf_files = readdir DFH;
	my @files = fileFilter($dir, @uf_files);
	closedir DFH;
	
	if (scalar @files > 0) {
		msg "Processing: $dir";
		foreach my $file (@files) {
			my $d_file = $file;
			$d_file =~ s/\s*\[[^\]]+\]\s*//gi;
			$d_file =~ s/\.[A-Za-z0-9]{1,4}$//gi;
			my $file_path = $dir . $file;
			
			
			if (hasMedia($file_path)) {
				msg;
				msg  "Searching for \"$d_file\"...    ", 1;
				if (my $movie = pickMovie($d_file)) {
					my $movie_data;
					if ($search_type eq 'tv') {
						$movie_data = $imdb->getShow($movie);
					} else {
						$movie_data = $imdb->getMovie($movie);
					}
					
					my $new_file = "$movie_data->{title} ($movie_data->{year}) [$movie_data->{id}]";
					my $new_path = $dir . $new_file;
					
					msg "...matched; renaming \"$file\" => \"$new_file\"";
					if ($rename) {
						move($file_path, $new_path);
					}
					
				} else {
					msg "...unmatched; skipping.";
				}
			}
			scanDir($file_path);
		} # foreach $file
	}
} # scanDir()

if (!$search) {
	if (! -d $scan_root) {
		usage "Directory \"$scan_root\" does not exist.";
	}
	
	scanDir($scan_root);
	
} else {
	if (my $movie = pickMovie($search)) {
		my $movie_data = $imdb->getMovie($movie);
		msg Dumper($movie_data);
	} else {
		msg "Exiting\n";
	}
}
